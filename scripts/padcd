#!/bin/bash
# Dedicated PADC daemon management script

# Resolve symlinks to get the real script location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

FIFO="/tmp/padc.fifo"
PID_FILE="/tmp/padc_daemon.pid"
LOG_FILE="/tmp/padc_daemon.log"
DAEMON_SCRIPT="$PROJECT_ROOT/daemon/padc_daemon.py"
VENV_PATH="$PROJECT_ROOT/.venv"

# Export CUDA library path for GPU support
export LD_LIBRARY_PATH="$VENV_PATH/lib/python3.12/site-packages/nvidia/cudnn/lib:$LD_LIBRARY_PATH"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if daemon is running
is_daemon_running() {
    # Check if PID file exists and process is running
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        fi
    fi
    # Fallback: check for FIFO
    if [[ -p "$FIFO" ]]; then
        return 0
    fi
    return 1
}

# Function to get daemon PID
get_daemon_pid() {
    if [[ -f "$PID_FILE" ]]; then
        cat "$PID_FILE"
    else
        # Fallback to pgrep, but only get the actual daemon process
        pgrep -f "python.*padc_daemon.py" | tail -1
    fi
}

# Function to start daemon
start_daemon() {
    if is_daemon_running; then
        echo -e "${YELLOW}Warning: Daemon is already running with PID: $(get_daemon_pid)${NC}"
        echo "Use 'restart' to restart or 'stop' to stop first"
        return 1
    fi
    
    # Clean up any stale files
    rm -f "$PID_FILE" "$FIFO" 2>/dev/null
    
    echo -e "${GREEN}Starting PADC daemon...${NC}"
    cd "$PROJECT_ROOT"
    uv run python "$DAEMON_SCRIPT" &
    
    # Wait for daemon to initialize (check multiple times)
    local max_attempts=10
    local attempt=0
    while [ $attempt -lt $max_attempts ]; do
        sleep 2
        if is_daemon_running; then
            echo -e "${GREEN}✓ Daemon started successfully (PID: $(get_daemon_pid))${NC}"
            return 0
        fi
        ((attempt++))
    done
    
    echo -e "${RED}✗ Failed to start daemon after ${max_attempts} attempts${NC}"
    return 1
}

# Function to stop daemon
stop_daemon() {
    if ! is_daemon_running; then
        echo -e "${YELLOW}No daemon process found${NC}"
        # Clean up stale files anyway
        rm -f "$PID_FILE" "$FIFO" 2>/dev/null
        return 0
    fi
    
    echo -e "${GREEN}Stopping PADC daemon...${NC}"
    
    # Get PID before killing
    PID=$(get_daemon_pid)
    
    # Force kill any remaining processes
    pkill -f "padc_daemon.py" 2>/dev/null || true
    
    # Clean up files
    rm -f "$PID_FILE" "$FIFO" 2>/dev/null
    
    echo -e "${GREEN}✓ Stopped daemon process: $PID${NC}"
    return 0
}

# Function to restart daemon
restart_daemon() {
    echo -e "${GREEN}Restarting PADC daemon...${NC}"
    stop_daemon
    echo "Sleeping 3s"
    sleep 3
    sudo systemctl stop ollama.service
    sudo rmmod nvidia_uvm
    sudo modprobe nvidia_uvm
    sudo systemctl start ollama.service
    echo "Sleeping 3s"
    sleep 3
    start_daemon
}

# Function to show daemon status
show_status() {
    echo -e "${GREEN}=== PADC Daemon Status ===${NC}"
    
    if is_daemon_running; then
        PID=$(get_daemon_pid)
        echo -e "Status: ${GREEN}Running${NC}"
        echo "PID: $PID"
        
        # Show process details
        echo -e "\nProcess details:"
        ps -p $PID -o pid,vsz,rss,pcpu,pmem,etime,comm 2>/dev/null || echo "Unable to get process details"
        
        # Check FIFO
        if [[ -p "$FIFO" ]]; then
            echo -e "\nFIFO: ${GREEN}Active${NC} ($FIFO)"
        else
            echo -e "\nFIFO: ${YELLOW}Missing${NC}"
        fi
        
        # Show last few log lines
        if [[ -f "$LOG_FILE" ]]; then
            echo -e "\nRecent activity:"
            tail -n 5 "$LOG_FILE"
        fi
    else
        echo -e "Status: ${RED}Not running${NC}"
        
        # Check for stale files
        if [[ -f "$PID_FILE" ]]; then
            echo -e "${YELLOW}Warning: Stale PID file found${NC}"
        fi
        if [[ -p "$FIFO" ]]; then
            echo -e "${YELLOW}Warning: Stale FIFO found${NC}"
        fi
    fi
}

# Function to show logs
show_logs() {
    if [[ ! -f "$LOG_FILE" ]]; then
        echo -e "${RED}No log file found${NC}"
        return 1
    fi
    
    if [[ "$1" == "-f" ]] || [[ "$1" == "--follow" ]]; then
        echo -e "${GREEN}Following daemon logs (Ctrl+C to stop)...${NC}"
        tail -f "$LOG_FILE"
    else
        echo -e "${GREEN}Last 50 lines of daemon log:${NC}"
        tail -n 50 "$LOG_FILE"
    fi
}

# Function to clean up stale files
cleanup() {
    echo -e "${GREEN}Cleaning up daemon files...${NC}"
    
    # Stop any running daemons
    if is_daemon_running; then
        stop_daemon
    fi
    
    # Remove all daemon-related files
    rm -f "$PID_FILE" "$FIFO" 2>/dev/null
    
    echo -e "${GREEN}✓ Cleanup complete${NC}"
}

# Main command handler
case "${1:-help}" in
    start)
        start_daemon
        ;;
    stop)
        stop_daemon
        ;;
    restart)
        restart_daemon
        ;;
    status)
        show_status
        ;;
    logs|log)
        show_logs "$2"
        ;;
    cleanup|clean)
        cleanup
        ;;
    help|--help|-h)
        echo "PADC Daemon Management Tool"
        echo ""
        echo "Usage: $0 [COMMAND]"
        echo ""
        echo "Commands:"
        echo "  start            Start the daemon"
        echo "  stop             Stop the daemon"
        echo "  restart          Restart the daemon"
        echo "  status           Show daemon status"
        echo "  logs [-f]        Show daemon logs (use -f to follow)"
        echo "  cleanup          Clean up all daemon files"
        echo "  help             Show this help message"
        echo ""
        echo "Examples:"
        echo "  $0 start         # Start the daemon"
        echo "  $0 status        # Check if daemon is running"
        echo "  $0 logs -f       # Follow the daemon logs"
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac
